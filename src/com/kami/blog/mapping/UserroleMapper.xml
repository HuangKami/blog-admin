<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kami.blog.dao.UserroleDao">
    <!-- Userrole的resultMap,column是给数据库列起的别名,它对应property类的属性-->
    <resultMap id="result_Userrole_Map" type="com.kami.blog.model.Userrole">
        <id column="id" jdbcType="INTEGER" property="id" />
        <result column="userId" jdbcType="VARCHAR" property="userId" />
        <association property="role" javaType="com.kami.blog.model.Role">
            <id property="id" column="roleId" javaType="java.lang.Integer" />
            <result property="name" column="roleName"  />
        </association>
    </resultMap>

	   <!-- Assist用于辅助工具类setRequires设置的条件,${req.require}表示列名,#{req.value}表示值它是防SQL注入的 -->
    <sql id="Assist">
        <where>
            <foreach collection="require" item="req" separator=" ">
                ${req.require} 
                <if test="req.value != null"> #{req.value}</if> 
                <if test="req.values != null">
                    <foreach collection="req.values" item="val" separator=","> 
                        #{val} 
                    </foreach> 
                </if> 
                <if test="req.suffix != null"> ${req.suffix}</if> 
            </foreach>
        </where>
    </sql>

	   <!-- updateAssist用于更新数据的使用它拓展自Assist,用于辅助工具类setRequires设置的条件,${req.require}表示列名,#{req.value}表示值它是防SQL注入的 -->
    <sql id="updateAssist">
        <where>
            <foreach collection="assist.require" item="req" separator=" ">
                ${req.require} 
                <if test="req.value != null"> #{req.value}</if> 
                <if test="req.values != null">
                    <foreach collection="req.values" item="val" separator=","> 
                        #{val} 
                    </foreach> 
                </if> 
                <if test="req.suffix != null"> ${req.suffix}</if> 
            </foreach>
        </where>
    </sql>

    <!-- 数据库中表名为:userrole的列名,as前是数据库的列明,as后是列的别名用于映射成实体类中的属性,需要注意的是别名必须与resultMap中的column别名一致 -->
    <sql id="userrole_Column">
        userrole.id as id
        ,userrole.roleId as roleId
        ,userrole.userId as userId
    </sql>

    <!--获得类名为:Userrole对应的数据库表的数据总行数 -->
    <select id="getUserroleRowCount" parameterType="com.kami.blog.common.Assist" resultType="java.lang.Long">
        select count(id) from userrole
        <if test="require!=null"><include refid="Assist" /></if>
    </select>
    <!-- 获得类名为:Userrole对应数据库中表的数据集合 -->
    <select id="selectUserrole" parameterType="com.kami.blog.common.Assist"  resultMap="result_Userrole_Map">
        select  <if test="distinct !=null">${distinct}</if>
        <choose>
            <when test="resultColumn!=null">${resultColumn}</when>
            <otherwise>
        <include refid="userrole_Column" /> 
            </otherwise>
        </choose> ,r.name as roleName 
        from userrole
        <choose>
            <when test="rowSize ==null">
                <if test="require!=null">
                    <include refid="Assist" />
                </if>
                <if test="order !=null">${order}</if>
            </when>
            <otherwise>
                inner join
                (
                SELECT id as primary_key FROM userrole
                <if test="require!=null">
                    <include refid="Assist" />
                </if>
                <if test="order !=null">${order}</if>
                <choose>
                    <when test="startRow !=null and rowSize !=null">LIMIT #{startRow,jdbcType=INTEGER},#{rowSize,jdbcType=INTEGER} </when>
                    <when test="rowSize !=null">LIMIT #{rowSize,jdbcType=INTEGER}</when>
                 </choose>
                 ) as tmp
                 on tmp.primary_key=userrole.id
            </otherwise>
        </choose>
        inner join role r on roleId = r.id
    </select> 

    <!-- 获得一个Userrole对象,以参数Userrole对象中不为空的属性作为条件进行查询-->
    <select id="selectUserroleByObj" parameterType="com.kami.blog.model.Userrole" resultMap="result_Userrole_Map">
        select 
            <include refid="userrole_Column" /> 
        from userrole
        <where>
            <if test="userId != null "> and userrole.userId = #{userId,jdbcType=VARCHAR}</if>
            <if test="roleId != null "> and userrole.roleId = #{roleId,jdbcType=INTEGER}</if>
            <if test="id != null "> and userrole.id = #{id,jdbcType=INTEGER}</if>
        </where>
    </select> 

    <!-- 通过Userrole的id获得对应数据库中表的数据对象-->
    <select id="selectUserroleById" parameterType="java.lang.Integer" resultMap="result_Userrole_Map">
        select 
            <include refid="userrole_Column" /> 
        from userrole
        where userrole.id = #{id,jdbcType=INTEGER}
    </select> 

    <!-- 将Userrole插入到对应数据库的表中,包括属性值为null的数据-->

    <insert id="insertUserrole" parameterType="com.kami.blog.model.Userrole">
        insert into userrole(id,roleId,userId) 
        values(#{id,jdbcType=INTEGER},#{roleId,jdbcType=INTEGER},#{userId,jdbcType=VARCHAR})
    </insert>

    <!-- 将Userrole中属性值不为null的数据,插入到对应数据库的表中-->
    <insert id="insertNonEmptyUserrole" parameterType="com.kami.blog.model.Userrole">
        insert into userrole
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">id,</if>
            <if test="roleId != null">roleId,</if>
            <if test="userId != null">userId,</if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null"> #{id,jdbcType=INTEGER},</if>
            <if test="roleId != null"> #{roleId,jdbcType=INTEGER},</if>
            <if test="userId != null"> #{userId,jdbcType=VARCHAR},</if>
        </trim>
    </insert>

    <!-- 将Userrole批量插入到对应数据库的表中-->
    <insert id="insertUserroleByBatch" parameterType="ArrayList">
        insert into userrole(id,roleId,userId) values
        <foreach collection="list" item="item" index="index" separator="," >
            (#{item.id,jdbcType=INTEGER},#{item.roleId,jdbcType=INTEGER},#{item.userId,jdbcType=VARCHAR})
        </foreach>
    </insert>

    <!-- 通过Userrole的id将数据库表中对应的数据删除-->
    <delete id="deleteUserroleById" parameterType="java.lang.Integer">
        delete from userrole
        where id = #{id,jdbcType=INTEGER}
    </delete>

    <!-- 通过辅助工具Assist中的条件将Userrole对应的数据库表的数据删除-->
    <delete id="deleteUserrole" parameterType="com.kami.blog.common.Assist">
        delete from userrole
        <if test="require!=null"><include refid="Assist" /></if>
    </delete>

    <!-- 通过Userrole的id将Userrole的数据更新到数据库中对应的表,包括值null的数据-->
    <update id="updateUserroleById" parameterType="com.kami.blog.model.Userrole">
        update userrole set
            roleId=#{roleId,jdbcType=INTEGER}
            ,userId=#{userId,jdbcType=VARCHAR}
        where id=#{id,jdbcType=INTEGER}
    </update>

    <!-- 通过Userrole的id将Userrole中属性值不为null的数据更新到数据库对应的表中-->
    <update id="updateNonEmptyUserroleById" parameterType="com.kami.blog.model.Userrole">
        update userrole
        <set>
            <if test="roleId != null">
                roleId=#{roleId,jdbcType=INTEGER},
            </if>
            <if test="userId != null">
                userId=#{userId,jdbcType=VARCHAR},
            </if>
        </set>
        where id=#{id,jdbcType=INTEGER}
    </update>

    <!-- 通过辅助工具Assist中的条件将Userrole中的数据更新到数据库对应的表中,包括值为null的数据-->
    <update id="updateUserrole" parameterType="map">
        update userrole
        <set>
                id=#{enti.id,jdbcType=INTEGER},
                roleId=#{enti.roleId,jdbcType=INTEGER},
                userId=#{enti.userId,jdbcType=VARCHAR},
        </set>
        <if test="assist.require!=null"><include refid="updateAssist" /></if>
    </update>

    <!-- 通过辅助工具Assist中的条件将Userrole中属性值不为null的数据更新到数据库对应的表中-->
    <update id="updateNonEmptyUserrole" parameterType="map">
        update userrole
        <set>
            <if test="enti.id != null">
                id=#{enti.id,jdbcType=INTEGER},
            </if>
            <if test="enti.roleId != null">
                roleId=#{enti.roleId,jdbcType=INTEGER},
            </if>
            <if test="enti.userId != null">
                userId=#{enti.userId,jdbcType=VARCHAR},
            </if>
        </set>
        <if test="assist.require!=null"><include refid="updateAssist" /></if>
    </update>

</mapper>