<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
	<!-- 扫描 -->
	<context:component-scan base-package="com.kami.blog" />
	<context:annotation-config />

	<!-- 加载配置文件 -->
	<bean id="propertyPlaceHolderConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:*.properties</value>
			</list>
		</property>
	</bean>

	<!-- 配置数据源 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${db.driverClassName}" />
		<property name="url" value="${db.url}" />
		<property name="username" value="${db.username}" />
		<property name="password" value="${db.pass}" />
		<!-- 连接池启动时的初始值 -->
		<property name="initialSize" value="${db.initialSize}" />
		<!-- 连接池的最大值 -->
		<property name="maxActive" value="${db.maxActive}" />
	</bean>

	<!-- SessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations" value="classpath:com/kami/blog/mapping/*.xml"></property>
	</bean>

	<!-- DAO扫描 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.kami.blog.dao" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
	</bean>

	<!-- 事务 -->
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<tx:annotation-driven transaction-manager="txManager" />

	<bean id="executorTaskDetail"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<!-- 调用的类 -->
		<property name="targetObject" ref="executorTask" />
		<!-- 调用类中的方法 -->
		<property name="targetMethod" value="startTask" />
		<property name="concurrent" value="false" />
	</bean>

	<!-- 定义触发时间 -->
	<bean id="executorTaskTrigger"
		class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="executorTaskDetail" />
		<!-- cron表达式 -->
		<property name="cronExpression" value="0/20 * * * * ?" />
	</bean>

	<!-- 总管理类 -->
	<bean id="startQuertz" lazy-init="false" autowire="no"
		class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<list>
				<ref bean="executorTaskTrigger" />
			</list>
		</property>
	</bean>

	<!-- redis -->
	<bean id="jedisConnectionFactory"
		class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
		<property name="usePool" value="true"></property>
		<property name="hostName" value="${redis.host}" />
		<property name="port" value="${redis.port}" />
		<property name="password" value="${redis.pass}" />
		<property name="timeout" value="${redis.timeout}" />
	</bean>
	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
		<property name="connectionFactory" ref="jedisConnectionFactory" />
	</bean>
	
	
	<!-- 配置权限管理器 -->  
	<bean id="cacheManager" class="org.apache.shiro.cache.MemoryConstrainedCacheManager" />    
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">    
        <!-- ref对应我们写的realm  MyShiro -->  
        <property name="realm" ref="userRealm"/>    
        <!-- 使用下面配置的缓存管理器 -->  
        <property name="cacheManager" ref="cacheManager"/>    
    </bean> 
    
    <!-- 配置shiro的过滤器工厂类，id- shiroFilter要和我们在web.xml中配置的过滤器一致 -->  
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">   
        <!-- 调用我们配置的权限管理器 -->   
        <property name="securityManager" ref="securityManager"/>   
        <!-- 配置我们的登录请求地址 -->   
        <property name="loginUrl" value="/login"/>    
        <!-- 配置我们在登录页登录成功后的跳转地址，如果你访问的是非/login地址，则跳到您访问的地址 -->  
        <property name="successUrl" value="/main"/>    
        <!-- 如果您请求的资源不再您的权限范围，则跳转到/403请求地址 -->  
        <property name="unauthorizedUrl" value="/unAuthorized"/>    
        <!-- 权限配置 -->  
        <property name="filterChainDefinitions">    
            <value>    
                <!-- anon表示此地址不需要任何权限即可访问 -->  
                /assets/**=anon  
                /bower_components/**=anon  
                /css/**=anon  
                /js/**=anon  
                /dist/**=anon  
                /fonts/**=anon  
                /images/**=anon  
                /plugins/**=anon 
                /login/login=anon 
                /sso=anon
                /unAuthorized=anon 
                <!-- perms[user:query]表示访问此连接需要权限为user:query的用户 -->  
                /user/list=perms[user:query]
                /user/add=perms[user:add]
                /user/update=perms[user:update]
                /user/delete=perms[user:delete]
                
                /role/list=perms[role:query]
                /role/add=perms[role:add]
                /role/update=perms[role:update]
                /role/delete=perms[role:delete]
                
                /privilege/list=perms[privilege:query]
                /privilege/add=perms[privilege:add]
                /privilege/update=perms[privilege:update]
                /privilege/delete=perms[privilege:delete]
                
                /userRole/list=perms[userRole:query]
                /userRole/select=perms[userRole:select]
                /userRole/add=perms[userRole:add]
                /userRole/update=perms[userRole:update]
                /userRole/delete=perms[userRole:delete]
                
                /rolePrivilege/list=perms[rolePrivilege:query]
                /rolePrivilege/select=perms[rolePrivilege:select]
                /rolePrivilege/add=perms[rolePrivilege:add]
                /rolePrivilege/update=perms[rolePrivilege:update]
                /rolePrivilege/delete=perms[rolePrivilege:delete]
                
                /article/list=perms[article:query]
                /article/delList=perms[delArticle:query]
                /article/update=perms[article:update]
                <!--所有的请求(除去配置的静态资源请求或请求地址为anon的请求)都要通过登录验证,如果未登录则跳到/login-->    
                /** = authc  
            </value>    
        </property>    
    </bean>  
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />   
</beans>